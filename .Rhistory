library(dplyr)
library(tidyr)
# Chargement des données
nb_joueurs <- 6
last_journee = 38
my_score <- read.table("data/scores.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE)
my_score_long <- my_score %>%
gather(journee, score, -c(joueur, points_moy)) %>%
mutate(score = (score - 60) %/% 4 + 1,
score = if_else(score < 0, 0, score))
my_score_long <- my_score_long %>%
filter(journee != "J22")
rencontres <- read.table("data/rencontres.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE) %>%
select(-starts_with("score_"))
rencontres <- purrr::map_dfr(1:10, ~rencontres) %>%
mutate(journee = rep(1:((nb_joueurs-1)*10), each = nb_joueurs/2)) %>%
filter(journee <= last_journee) %>%
mutate(journee = paste0("J",journee))
malus <- read.table("data/malus.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE) %>%
select(-oubli.compo) %>%
gather(journee, malus, -joueur)
table_factorial_joueurs <- arrangements::permutations(x = unique(rencontres$joueur1))
source("functions.R")
# Récupération du score
score_rencontres <- get_score_rencontres(rencontres, my_score_long, random_rencontres = FALSE)
# Récupération du classement
get_classement(score_rencontres, malus = malus)
my_score_long <- my_score %>%
gather(journee, score, -c(joueur, points_moy)) %>%
mutate(score = (score - 60) %/% 4 + 1,
score = if_else(score < 0, 0, score))
# my_score_long <- my_score_long %>%
#   filter(journee != "J22")
rencontres <- read.table("data/rencontres.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE) %>%
select(-starts_with("score_"))
rencontres <- purrr::map_dfr(1:10, ~rencontres) %>%
mutate(journee = rep(1:((nb_joueurs-1)*10), each = nb_joueurs/2)) %>%
filter(journee <= last_journee) %>%
mutate(journee = paste0("J",journee))
malus <- read.table("data/malus.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE) %>%
select(-oubli.compo) %>%
gather(journee, malus, -joueur)
table_factorial_joueurs <- arrangements::permutations(x = unique(rencontres$joueur1))
source("functions.R")
# Récupération du score
score_rencontres <- get_score_rencontres(rencontres, my_score_long, random_rencontres = FALSE)
# Récupération du classement
get_classement(score_rencontres, malus = malus)
library(dplyr)
library(tidyr)
# Chargement des données
nb_joueurs <- 6
last_journee = 38
my_score <- read.table("data/scores.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE)
my_score_long <- my_score %>%
gather(journee, score, -c(joueur, points_moy)) %>%
mutate(score = (score - 60) %/% 4 + 1,
score = if_else(score < 0, 0, score))
# my_score_long <- my_score_long %>%
#   filter(journee != "J22")
rencontres <- read.table("data/rencontres.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE) %>%
select(-starts_with("score_"))
rencontres <- purrr::map_dfr(1:10, ~rencontres) %>%
mutate(journee = rep(1:((nb_joueurs-1)*10), each = nb_joueurs/2)) %>%
filter(journee <= last_journee) %>%
mutate(journee = paste0("J",journee))
malus <- read.table("data/malus.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE) %>%
select(-oubli.compo) %>%
gather(journee, malus, -joueur)
table_factorial_joueurs <- arrangements::permutations(x = unique(rencontres$joueur1))
source("functions.R")
# Récupération du score
score_rencontres <- get_score_rencontres(rencontres, my_score_long, random_rencontres = FALSE)
# Récupération du classement
get_classement(score_rencontres, malus = malus)
# Simulation du classement avec désordre dans les rencontres :
library(furrr)
plan(multisession, workers = nb_joueurs)
nb_permutations <- factorial(nb_joueurs)
res <- furrr::future_map_dfr(1:nb_permutations, function(i){
score_rencontres <- get_score_rencontres(rencontres, my_score_long, random_rencontres = FALSE, indice_factorial = i)
get_classement(score_rencontres, malus = malus) %>%
mutate(indice_factorial = i)
})
res = res %>%
mutate(ordre = rep(1:nb_joueurs, nb_permutations))
saveRDS(res, "resultat_tous_classements.RDS")
classement_moyen <- res %>%
group_by(joueur) %>%
summarise(points_moy = mean(score_final),
ordre_moy = mean(ordre),
ordre_min = min(ordre),
ordre_max = max(ordre)) %>%
arrange(desc(points_moy))
classement_moyen
library(ggplot2)
# Graphique de densité de points par joueur
ggplot(res %>% mutate(joueur = factor(joueur, levels = classement_moyen$joueur), ordered = TRUE)) +
geom_density(aes(x=score_final, fill = joueur), alpha = 0.5, adjust = 2) +
facet_wrap(~joueur, ncol = 1) +
theme_minimal() +
labs(title = "Densité des points avec toutes les permutations de noms possibles") +
guides(color = FALSE) +
scale_fill_viridis_d()
# Graphique de densité de classement par joueur
ggplot(res %>% mutate(joueur = factor(joueur, levels = classement_moyen$joueur), ordered = TRUE)) +
geom_bar(aes(x=ordre, fill = joueur), alpha = 0.5, adjust = 5) +
theme_minimal() +
labs(title = "Classements avec toutes les permutations de noms possibles") +
guides(color = FALSE) +
scale_fill_viridis_d()
dim(res_factorial)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# Chargement des packages et données
library(dplyr)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
source("functions.R")
ordre_joueur <- c("Valentin", "Mathias",  "Maxime D", "Maxime M", "Loïck", "Rodolphe")
my_score <- read.table("data/scores.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE) %>%
mutate(joueur = factor(joueur, levels = ordre_joueur, labels = ordre_joueur, ordered = TRUE))
nb_joueurs <- 6
last_journee = 38
my_score_long <- my_score %>%
select(-points_moy) %>%
gather(journee, score, -c(joueur)) %>%
mutate(points_journee = score,
score = (score - 60) %/% 4 + 1,
score = if_else(score < 0, 0, score))%>%
mutate(numero_journee = as.numeric(gsub("J", "", journee)))
rencontres <- read.table("data/rencontres.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE) %>%
select(-starts_with("score_"))
rencontres <- purrr::map_dfr(1:10, ~rencontres) %>%
mutate(journee = rep(1:((nb_joueurs-1)*10), each = nb_joueurs/2)) %>%
filter(journee <= last_journee) %>%
mutate(journee = paste0("J",journee))
malus <- read.table("data/malus.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE) %>%
select(-oubli.compo) %>%
gather(journee, malus, -joueur) %>%
mutate(numero_journee = as.numeric(gsub("J", "", journee))) %>%
mutate(joueur = factor(joueur, levels = ordre_joueur, labels = ordre_joueur, ordered = TRUE))
res_factorial <- readRDS("resultat_tous_classements.RDS") %>%
mutate(joueur = factor(joueur, levels = ordre_joueur, labels = ordre_joueur, ordered = TRUE))
# Récupération du score
score_rencontres <- get_score_rencontres(rencontres, my_score_long, random_rencontres = FALSE) %>%
mutate(numero_journee = as.numeric(gsub("J", "", journee)))%>%
mutate(joueur = factor(joueur, levels = ordre_joueur, labels = ordre_joueur, ordered = TRUE))
# Récupération du classement
get_classement(score_rencontres, malus = malus) %>%
knitr::kable()
classement_par_journee <- purrr::map_dfr(unique(score_rencontres$numero_journee),
function(indice_journee){
score_rencontres %>% filter(numero_journee <= indice_journee) %>%
get_classement(malus = malus %>% filter(numero_journee <= indice_journee)) %>%
mutate(indice_journee = indice_journee)
})
ggplot(classement_par_journee) +
geom_line(aes(x=indice_journee, y=score_final, colour = joueur), size = 1.1) +
geom_point(aes(x=indice_journee, y=score_final, colour = joueur)) +
ggrepel::geom_text_repel(aes(x=30, y=score_final, label = joueur, colour = joueur),
data = classement_par_journee %>% filter(indice_journee == max(indice_journee)), direction = "y") +
scale_colour_manual(values = brewer.pal(8, "Set2"), breaks = unique(my_score_long$joueur)) +
theme_minimal()
my_score_long %>% group_by(joueur) %>%
summarise(Score_max = max(points_journee),
Score_min = min(points_journee),
Buts_max = max(score)) %>%
arrange(desc(Score_max)) %>%
knitr::kable()
dim(res_factorial)
head(res_factorial)
res_factorial %>% filter(joueur == "Loïck", ordre == 4)
res_factorial %>% filter(joueur == "Mathias", ordre == 2)
res_factorial %>% filter(joueur == "Maxime M", ordre == 1)
factorial(8)
18/40320
factorial(6)
18/720
paste0(round(100*18/factorial(6), 1),"%")
nb_joueurs/2
(nb_joueurs/2+1)
install.packages("xaringan")
install.packages("xaringan")
install.packages("xaringan")
install.packages("xaringan")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
