---
title: "Analyse de fin de saison"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
```

```{r}
# Chargement des packages et données
library(dplyr)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
source("functions.R")

# Ordre selon le classement moyen avec toutes les permutations
# ordre_joueur <- c("Valentin", "Mathias",  "Maxime D", "Maxime M", "Loïck", "Rodolphe")
ordre_joueur <- c("Loïck", "Maxime D", "Valentin",  "Maxime M", "Rodolphe", "Mathias")

my_score <- read.table("data/scores.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE) %>%
  mutate(joueur = factor(joueur, levels = ordre_joueur, labels = ordre_joueur, ordered = TRUE))

nb_joueurs <- 6
last_journee = 38

my_score_long <- my_score %>%
  select(-points_moy) %>%
  gather(journee, score, -c(joueur)) %>%
  mutate(points_journee = score,
         score = (score - 60) %/% 4 + 1,
         score = if_else(score < 0, 0, score))%>%
  mutate(numero_journee = as.numeric(gsub("J", "", journee)))

rencontres <- read.table("data/rencontres.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE) %>%
  select(-starts_with("score_"))
rencontres <- purrr::map_dfr(1:10, ~rencontres) %>%
  mutate(journee = rep(1:((nb_joueurs-1)*10), each = nb_joueurs/2)) %>%
  filter(journee <= last_journee) %>%
  mutate(journee = paste0("J",journee))

malus <- read.table("data/malus.txt", sep="\t", dec=",", header = TRUE, stringsAsFactors = FALSE) %>%
  select(-oubli.compo) %>%
  gather(journee, malus, -joueur) %>%
  mutate(numero_journee = as.numeric(gsub("J", "", journee))) %>%
  mutate(joueur = factor(joueur, levels = ordre_joueur, labels = ordre_joueur, ordered = TRUE))

res_factorial <- readRDS("resultat_tous_classements.RDS") %>%
  mutate(joueur = factor(joueur, levels = ordre_joueur, labels = ordre_joueur, ordered = TRUE))

# Récupération du score
score_rencontres <- get_score_rencontres(rencontres, my_score_long, random_rencontres = FALSE) %>%
  mutate(numero_journee = as.numeric(gsub("J", "", journee)))%>%
  mutate(joueur = factor(joueur, levels = ordre_joueur, labels = ordre_joueur, ordered = TRUE))
```


## Classement final après `r stringr::str_extract(unique(score_rencontres$journee), pattern = "[0-9]+") %>% as.integer() %>% max` journées

```{r}
# Récupération du classement
get_classement(score_rencontres, malus = malus) %>%
  knitr::kable()
```

## Evolution du classement au fil des journées

```{r}

classement_par_journee <- purrr::map_dfr(unique(score_rencontres$numero_journee), 
           function(indice_journee){
             score_rencontres %>% filter(numero_journee <= indice_journee) %>%
               get_classement(malus = malus %>% filter(numero_journee <= indice_journee)) %>%
               mutate(indice_journee = indice_journee)
           })

ggplot(classement_par_journee) + 
  geom_line(aes(x=indice_journee, y=score_final, colour = joueur), size = 1.1) + 
  geom_point(aes(x=indice_journee, y=score_final, colour = joueur)) + 
  ggrepel::geom_text_repel(aes(x=30, y=score_final, label = joueur, colour = joueur), 
                           data = classement_par_journee %>% filter(indice_journee == max(indice_journee)), direction = "y") +
  scale_colour_manual(values = brewer.pal(8, "Set2"), breaks = unique(my_score_long$joueur)) +
  theme_minimal()
```



## Score le plus élevé/faible sur une journée, par joueur 

```{r}
my_score_long %>% group_by(joueur) %>%
  summarise(Score_max = max(points_journee),
            Score_min = min(points_journee),
            Buts_max = max(score)) %>%
  arrange(desc(Score_max)) %>%
  knitr::kable()
```

## Tirage au sort des rencontres

L'ordre des prénoms au début de la saison compte beaucoup... Il y a 6! permutations possibles, soit... `r factorial(nb_joueurs)` combinaisons !

Si on avait fait toutes ces permutations, puis une moyenne du classement, on aurait obtenu ça :

```{r}
classement_moyen <- res_factorial %>% 
  group_by(joueur) %>% 
  summarise(points_moy = mean(score_final),
            ordre_moy = mean(ordre),
            ordre_min = min(ordre),
            ordre_max = max(ordre)) %>% 
  mutate_if(is.numeric, ~round(.,1)) %>%
  arrange(desc(points_moy))
classement_moyen %>%
  knitr::kable()
```

Il y a seulement 3 possibilités pour Loïck de payer le resto :

```{r}
worst_classement_player(res_factorial, "Loïck") %>%
  knitr::kable()
```

Et 18 (soit `r paste0(round(100*18/factorial(nb_joueurs), 1),"%")` de chances) pour que Morel gagne le titre


## Quelles sont les probabilités de payer le resto ?

```{r}
res_factorial %>% 
  group_by(joueur) %>% 
  summarise(proba_payer_resto = paste(round(100*sum(ordre >= (nb_joueurs/2+1))/factorial(nb_joueurs),1),"%")) %>%
  arrange(desc(proba_payer_resto)) %>%
  knitr::kable()
```

## Quelques graphiques

```{r}
# Graphique de densité de points par joueur
my_graph <- ggplot(res_factorial) +
  geom_density(aes(x=score_final, fill = joueur), alpha = 0.5, adjust = 2) +
  facet_wrap(~joueur, ncol = 1) +
  theme_minimal() +
  labs(title = "Densité des points avec toutes les permutations de noms possibles") +
  guides(color = FALSE) +
  scale_fill_manual(values = brewer.pal(8, "Set2"), breaks = unique(my_score_long$joueur))
plotly::ggplotly(my_graph)
```


```{r}
# Graphique de densité de classement par joueur
my_graph <- ggplot(res_factorial %>% 
                     group_by(ordre,joueur) %>% 
                     summarise(count=n()) %>% 
                     mutate(perc=round(100*count/sum(count),2))) +
  geom_bar(aes(x=ordre, y = perc, fill = joueur), adjust = 5, stat="identity") +
  # scale_y_continuous(labels=scales::percent) +
  scale_x_discrete(1:8) +
  theme_minimal() +
  labs(title = "Classements avec toutes les permutations de noms possibles") +
  guides(color = FALSE) +
  scale_fill_manual(values = brewer.pal(8, "Set2"), breaks = unique(my_score_long$joueur))
plotly::ggplotly(my_graph)
```

## Journée la plus et la moins prolifique

```{r}
my_score_long %>%
  group_by(journee) %>%
  summarise(nb_buts = sum(score),
            score_moyen = round(mean(points_journee),2)) %>%
  arrange(desc(nb_buts))
```

Pour la journée la plus prolifique, nombre de buts par personne

```{r}
stat_journee_prolifique <- my_score_long %>%
  group_by(journee) %>%
  mutate(nb_buts = sum(score),
            score_moyen = round(mean(points_journee),2)) %>%
  ungroup()

journee_plus_prolifique <- stat_journee_prolifique %>%
  filter(nb_buts == max(nb_buts)) %>%
  pull(journee)
stat_journee_prolifique %>%
  filter(nb_buts == max(nb_buts)) %>%
  ggplot() +
  geom_bar(aes(x=joueur, y=score, fill = joueur), stat = "identity") +
  scale_fill_manual(values = brewer.pal(8, "Set2"), breaks = unique(my_score_long$joueur)) +
  labs(title = paste("Journée", journee_plus_prolifique)) +
  theme_minimal()
```

Pour la journée la moins prolifique, nombre de buts par personne

```{r}
journee_moins_prolifique <- stat_journee_prolifique %>%
  filter(nb_buts == min(nb_buts)) %>%
  pull(journee)
  
stat_journee_prolifique %>%
  filter(nb_buts == min(nb_buts)) %>%
  ggplot() +
  geom_bar(aes(x=joueur, y=score, fill = joueur), stat = "identity") +
  scale_fill_manual(values = brewer.pal(8, "Set2"), breaks = unique(my_score_long$joueur)) +
  labs(title = paste("Journée", journee_moins_prolifique)) +
  theme_minimal()
```


Plus longue série sans marquer

```{r}
my_score_long %>%
  group_by(joueur) %>%
  summarise(serie_sans_marquer = max(rle(score == 0)$lengths[rle(score == 0)$values])) %>%
  ungroup() %>%
  arrange(desc(serie_sans_marquer)) %>%
  mutate(joueur = factor(joueur, levels = ordre_joueur, ordered = TRUE)) %>%
  ggplot() + geom_bar(aes(x=joueur, y=serie_sans_marquer, fill = joueur), stat = "identity") +
  scale_fill_manual(values = brewer.pal(8, "Set2"), breaks = unique(my_score_long$joueur)) +
  theme_minimal()
```

Plus longue série à marquer un but à chaque matchs

```{r}
my_score_long %>%
  group_by(joueur) %>%
  summarise(serie_buts = max(rle(score > 0)$lengths[rle(score > 0)$values])) %>%
  ungroup() %>%
  arrange(desc(serie_buts)) %>%
  mutate(joueur = factor(joueur, levels = ordre_joueur, ordered = TRUE)) %>%
  ggplot() + geom_bar(aes(x=joueur, y=serie_buts, fill = joueur), stat = "identity") +
  scale_fill_manual(values = brewer.pal(8, "Set2"), breaks = unique(my_score_long$joueur)) +
  theme_minimal()
```

